/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ForCon;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.util.Arrays;
import java.util.Collections;

import java.awt.Color;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import org.json.JSONObject;
import org.json.JSONException;

import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;

/**
 *
 * @author Sil_B
 */
public class GUIForm extends javax.swing.JFrame {
    String date_op = "2018-11-20";
    Calendar cal = Calendar.getInstance();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String sDate = sdf.format(cal.getTime());
    OkHttpClient client = new OkHttpClient();
    String run(String url) throws IOException {
        Request request = new Request.Builder()
                .url("http://data.fixer.io/api/"+ date_op + "?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB")
                .get()
                .build();
        try (Response response = client.newCall(request).execute()){
            return response.body().string();
        }
    }
    /**
     * Creates new form GUIForm
     */
    public GUIForm() {   
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        graph = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setTitle("Currency Converter");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(6, 47, 79));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Currency Converter");

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "THB", "USD", "GBP", "EUR", "CHF", "AUD", "JPY", "KRW", "CNY", "HKD", "RUB" }));

        jComboBox2.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "USD", "THB", "GBP", "EUR", "CHF", "AUD", "JPY", "KRW", "CNY", "HKD", "RUB" }));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 32)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));

        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jTextField1.setToolTipText("");

        jTextField2.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("(GMT+7) Thailand local time.");

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jButton2.setText("Help");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "", ""
            }
        ));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        jTabbedPane1.addTab("Exchange Rate", jScrollPane2);

        graph.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        graph.setText("Graph");
        graph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addComponent(graph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(61, 61, 61)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(graph, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this,
            "THB : Thai Baht\n" +
            "USD : United States Dollar\n" +
            "GBP : British Pound Sterling\n" +
            "EUR : Euro\n" +
            "CHF : Swiss Franc\n" +
            "AUD : Australian Dollar\n" +
            "JPY : Japanese Yen\n" +
            "KRW : South Korean Won\n" +
            "CNY : Chinese Yuan\n" +
            "HKD : Hong Kong Dollar\n" +
            "RUB : Russian Ruble",
            "Currency Symbols",
            JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            GUIForm example = new GUIForm();
            String response = example.run("http://data.fixer.io/api/latest?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB");
            //System.out.println(response);

            String line = response;
            //System.out.println(line);
            String json = line;
            //*********START*********
            JSONObject c = new JSONObject(json);
            //System.out.println(c);

            Boolean booleanResultSuccess = c.getBoolean("success");
            Integer intResultTimestamp = c.getInt("timestamp");
            String strResultBase = c.getString("base");
            String strResultDate = c.getString("date");

            //System.out.println(booleanResultSuccess);
            //System.out.println(intResultTimestamp);
            //System.out.println(strResultBase);
            //System.out.println(strResultDate);

            Object objectResultRates = c.get("rates");
            //System.out.println(objectResultRates);
            String s = objectResultRates.toString();
            //System.out.println(s);

            JSONObject tt = new JSONObject(s);

            //*********START-jTextField*********
            String PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
            String base_num = jTextField1.getText();
            base_num = jTextField1.getText();
            Object object_currency = jComboBox1.getSelectedItem();
            String base_currency = object_currency.toString();
            //System.out.println(object_currency);
            
            Object object_to_currency = jComboBox2.getSelectedItem();
            String to_currency = object_to_currency.toString();
            //System.out.println(object_to_currency);
            //System.out.println(base_currency);
            //System.out.println(to_currency);
            Object GetBase = tt.get(base_currency);
            String Base_1 = GetBase.toString();
            Double Base = Double.parseDouble(Base_1);
            
            Object GetTo = tt.get(to_currency);
            String Get_1 = GetTo.toString();
            Double To = Double.parseDouble(Get_1);
            //System.out.println(tt);
            //System.out.println(Base);
            //System.out.println(To);
            
            //***********END-jTextField**********
            
            //*********START-Calculate-The-Currency*********
            
            Double Rate = Double.parseDouble(base_num);
            Double mid1 = 1/Base*To;
            String to12 = String.format("%.3f",mid1);
            Double mid2 = 1/Base*Rate*To;
            String FCon = String.format("%.6f",mid2);
            jTextField2.setText(FCon);
            //**********END-Calculate-The-Currency**********
            
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            //System.out.println(strResultDate + ". " + sdf.format(cal.getTime()) + ". (GMT+7) Thailand local time.");
            
            jLabel2.setText("1 " + base_currency + " equals");
            jLabel4.setText(to12 + " " + to_currency);
            jLabel3.setText(strResultDate + ". " + sdf.format(cal.getTime()) + ". (GMT+7) Thailand local time.");
            
            //-----------START-jTable-----------
            
            Double[] List_array = {1.00,2.00,5.00,10.00,15.00,20.00,25.00,50.00,100.00,150.00,200.00,300.00,500.00,1000.00,2000.00,2500.00,5000.00,7500.00,1000.00,100000.00};
            jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                base_currency, to_currency
            }  
        ));
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            for(int i=0; i<List_array.length; i++){
                model.addRow(new Object[0]);
                model.setValueAt(String.format("%.2f", List_array[i]), i, 0);
                model.setValueAt(String.format("%.2f",(List_array[i]*mid1)), i, 1);
            }
        
        } catch (MalformedURLException e) {
            System.out.println("Malformed URL: " + e.getMessage());
        } catch (IOException e){
            System.out.println("IOException: " + e.getMessage());
        } catch (JSONException e){
            System.out.println("JSONException: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void graphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphActionPerformed
        try {
            //THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB
            //---------start_date_format---------
            
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM");
            String sDate = sdf.format(cal.getTime());
            
            Date date = sdf.parse(sDate); // ParseException
            Calendar cp = Calendar.getInstance();
            cp.setTime(date);
            String date_1 = sdf.format(cp.getTime());
            String date_1_2 = sdf2.format(cp.getTime());
            //System.out.println(date_1);
            //System.out.println(date_1_2);
            
            //---------start_date_format---------
            
            //---------start_set_date---------
            
            cp.add(Calendar.DATE, -1); 
            String date_2 = sdf.format(cp.getTime());
            String date_2_2 = sdf2.format(cp.getTime());
            //System.out.println(date_2);
            //System.out.println(date_2_2);
            
            cp.add(Calendar.DATE, -1);
            String date_3 = sdf.format(cp.getTime());
            String date_3_2 = sdf2.format(cp.getTime());
            //System.out.println(date_3);
            //System.out.println(date_3_2);
            
            cp.add(Calendar.DATE, -1);
            String date_4 = sdf.format(cp.getTime());
            String date_4_2 = sdf2.format(cp.getTime());
            //System.out.println(date_4);
            //System.out.println(date_4_2);
            
            cp.add(Calendar.DATE, -1);
            String date_5 = sdf.format(cp.getTime());
            String date_5_2 = sdf2.format(cp.getTime());
            //System.out.println(date_5);
            //System.out.println(date_5_2);
            
            cp.add(Calendar.DATE, -1);
            String date_6 = sdf.format(cp.getTime());
            String date_6_2 = sdf2.format(cp.getTime());
            //System.out.println(date_6);
            //System.out.println(date_6_2);
            
            cp.add(Calendar.DATE, -1);
            String date_7 = sdf.format(cp.getTime());
            String date_7_2 = sdf2.format(cp.getTime());
            //System.out.println(date_7);
            //System.out.println(date_7_2);
            
            //---------end_set_date---------
            
            //---------start_dataset_date1---------
            String url_1 = "http://data.fixer.io/api/latest?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB";
            URL url_01 = new URL(url_1);
            //System.out.println(url_01);
            URLConnection urlConnection1 = url_01.openConnection();
            urlConnection1.setDoOutput(true);
            urlConnection1.connect();
            BufferedReader inputStream1 = new BufferedReader(new InputStreamReader(
                    urlConnection1.getInputStream()));
            String line1 = inputStream1.readLine();
            //System.out.println(line1); //line3
            String json1 = line1;
            //*********START*********
            JSONObject c1 = new JSONObject(json1);
            //System.out.println(c1);
            Boolean booleanResultSuccess1 = c1.getBoolean("success");
            Integer intResultTimestamp1 = c1.getInt("timestamp");
            
            String strResultBase1 = c1.getString("base");
            
            String strResultDate1 = c1.getString("date");
            System.out.println(strResultDate1);
            /*
            System.out.println(booleanResultSuccess1);
            System.out.println(intResultTimestamp1);
            System.out.println(strResultBase1);
            System.out.println(strResultDate1);
            */
            Object objectResultRates1 = c1.get("rates");
            //System.out.println(objectResultRates1);
            String s1 = objectResultRates1.toString();
            //System.out.println(s1);
            JSONObject tt1 = new JSONObject(s1);
            //System.out.println(tt1);
            Object GetTHB1 = tt1.get("THB");   
            String THB_1 = GetTHB1.toString();
            Double THB1 = Double.parseDouble(THB_1); //THB1
            Object GetCHF1 = tt1.get("CHF");
            String CHF_1 = GetCHF1.toString();
            Double CHF1 = Double.parseDouble(CHF_1); //CHF1
            Object GetAUD1 = tt1.get("AUD");
            String AUD_1 = GetAUD1.toString();
            Double AUD1 = Double.parseDouble(AUD_1); //AUD1
            Object GetHKD1 = tt1.get("HKD");
            String HKD_1 = GetHKD1.toString();
            Double HKD1 = Double.parseDouble(HKD_1); //HKD1
            Object GetKRW1 = tt1.get("KRW");
            String KRW_1 = GetKRW1.toString();
            Double KRW1 = Double.parseDouble(KRW_1); //KRW1
            Object GetJPY1 = tt1.get("JPY");
            String JPY_1 = GetJPY1.toString();
            Double JPY1 = Double.parseDouble(JPY_1); //JPY1
            Object GetEUR1 = tt1.get("EUR");
            String EUR_1 = GetEUR1.toString();
            Double EUR1 = Double.parseDouble(EUR_1); //EUR1
            Object GetGBP1 = tt1.get("GBP");
            String GBP_1 = GetGBP1.toString();
            Double GBP1 = Double.parseDouble(GBP_1); //GBP1
            Object GetUSD1 = tt1.get("USD");
            String USD_1 = GetUSD1.toString();
            Double USD1 = Double.parseDouble(USD_1); //USD1
            Object GetRUB1 = tt1.get("RUB");
            String RUB_1 = GetRUB1.toString();
            Double RUB1 = Double.parseDouble(RUB_1); //RUB1
            Object GetCNY1 = tt1.get("CNY");
            String CNY_1 = GetCNY1.toString();
            Double CNY1 = Double.parseDouble(CNY_1); //CNY1
            /*
            System.out.println(THB1);
            System.out.println(CHF1);
            System.out.println(AUD1);
            System.out.println(HKD1);
            System.out.println(KRW1);
            System.out.println(JPY1);
            System.out.println(EUR1);
            System.out.println(GBP1);
            System.out.println(USD1);
            System.out.println(RUB1);
            System.out.println(CNY1);
            */
            //----------end_dataset_date1----------
            
            //---------start_dataset_date2---------
            String url_2 = "http://data.fixer.io/api/"+date_2+"?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB";
            URL url_02 = new URL(url_2);
            System.out.println(url_02);
            URLConnection urlConnection2 = url_02.openConnection();
            urlConnection2.setDoOutput(true);
            urlConnection2.connect();
            BufferedReader inputStream2 = new BufferedReader(new InputStreamReader(
                    urlConnection2.getInputStream()));
            String line2 = inputStream2.readLine();
            //System.out.println(line2);
            String json2 = line2;
            //*********START*********
            JSONObject c2 = new JSONObject(json2);
            //System.out.println(c2);
            Boolean booleanResultSuccess2 = c2.getBoolean("success");
            Integer intResultTimestamp2 = c2.getInt("timestamp");
            Boolean booleanResultHistoricl2 = c2.getBoolean("historical");
            String strResultBase2 = c2.getString("base");
            String strResultDate2 = c2.getString("date");
            System.out.println(strResultDate2);
            /*
            System.out.println(booleanResultSuccess2);
            System.out.println(intResultTimestamp2);
            System.out.println(booleanResultHistoricl2);
            System.out.println(strResultBase2);
            System.out.println(strResultDate2);
            */
            Object objectResultRates2 = c2.get("rates");
            //System.out.println(objectResultRates2);
            String s2 = objectResultRates2.toString();
            //System.out.println(s2);
            JSONObject tt2 = new JSONObject(s2);
            //System.out.println(tt2);
            Object GetTHB2 = tt2.get("THB");   
            String THB_2 = GetTHB2.toString();
            Double THB2 = Double.parseDouble(THB_2); //THB2
            Object GetCHF2 = tt2.get("CHF");
            String CHF_2 = GetCHF2.toString();
            Double CHF2 = Double.parseDouble(CHF_2); //CHF2
            Object GetAUD2 = tt2.get("AUD");
            String AUD_2 = GetAUD1.toString();
            Double AUD2 = Double.parseDouble(AUD_2); //AUD2
            Object GetHKD2 = tt2.get("HKD");
            String HKD_2 = GetHKD2.toString();
            Double HKD2 = Double.parseDouble(HKD_2); //HKD2
            Object GetKRW2 = tt2.get("KRW");
            String KRW_2 = GetKRW2.toString();
            Double KRW2 = Double.parseDouble(KRW_2); //KRW2
            Object GetJPY2 = tt2.get("JPY");
            String JPY_2 = GetJPY2.toString();
            Double JPY2 = Double.parseDouble(JPY_2); //JPY2
            Object GetEUR2 = tt2.get("EUR");
            String EUR_2 = GetEUR2.toString();
            Double EUR2 = Double.parseDouble(EUR_2); //EUR2
            Object GetGBP2 = tt2.get("GBP");
            String GBP_2 = GetGBP2.toString();
            Double GBP2 = Double.parseDouble(GBP_2); //GBP2
            Object GetUSD2 = tt2.get("USD");
            String USD_2 = GetUSD2.toString();
            Double USD2 = Double.parseDouble(USD_2); //USD2
            Object GetRUB2 = tt2.get("RUB");
            String RUB_2 = GetRUB2.toString();
            Double RUB2 = Double.parseDouble(RUB_2); //RUB2
            Object GetCNY2 = tt2.get("CNY");
            String CNY_2 = GetCNY2.toString();
            Double CNY2 = Double.parseDouble(CNY_2); //CNY2
            /*
            System.out.println(THB2);
            System.out.println(CHF2);
            System.out.println(AUD2);
            System.out.println(HKD2);
            System.out.println(KRW2);
            System.out.println(JPY2);
            System.out.println(EUR2);
            System.out.println(GBP2);
            System.out.println(USD2);
            System.out.println(RUB2);
            System.out.println(CNY2);
            */
            //----------end_dataset_date2----------
            
            //---------start_dataset_date3---------
            String url_3 = "http://data.fixer.io/api/"+date_3+"?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB";
            URL url_03 = new URL(url_3);
            //System.out.println(url_03);
            URLConnection urlConnection3 = url_03.openConnection();
            urlConnection3.setDoOutput(true);
            urlConnection3.connect();
            BufferedReader inputStream3 = new BufferedReader(new InputStreamReader(
                    urlConnection3.getInputStream()));
            String line3 = inputStream3.readLine();
            //System.out.println(line3); 
            String json3 = line3;
            //*********START*********
            JSONObject c3 = new JSONObject(json3);
            //System.out.println(c1);
            Boolean booleanResultSuccess3 = c3.getBoolean("success");
            Integer intResultTimestamp3 = c3.getInt("timestamp");
            Boolean booleanResultHistoricl3 = c3.getBoolean("historical");
            String strResultBase3 = c3.getString("base");
            String strResultDate3 = c3.getString("date");
            /*
            System.out.println(booleanResultSuccess3);
            System.out.println(intResultTimestamp3);
            System.out.println(booleanResultHistoricl3);
            System.out.println(strResultBase3);
            System.out.println(strResultDate3);
            */
            Object objectResultRates3 = c3.get("rates");
            //System.out.println(objectResultRates3);
            String s3 = objectResultRates3.toString();
            //System.out.println(s3);
            JSONObject tt3 = new JSONObject(s3);
            //System.out.println(tt3);
            Object GetTHB3 = tt3.get("THB");   
            String THB_3 = GetTHB3.toString();
            Double THB3 = Double.parseDouble(THB_3); //THB3
            Object GetCHF3 = tt3.get("CHF");
            String CHF_3 = GetCHF3.toString();
            Double CHF3 = Double.parseDouble(CHF_3); //CHF3
            Object GetAUD3 = tt3.get("AUD");
            String AUD_3 = GetAUD3.toString();
            Double AUD3 = Double.parseDouble(AUD_3); //AUD3
            Object GetHKD3 = tt3.get("HKD");
            String HKD_3 = GetHKD3.toString();
            Double HKD3 = Double.parseDouble(HKD_3); //HKD3
            Object GetKRW3 = tt3.get("KRW");
            String KRW_3 = GetKRW3.toString();
            Double KRW3 = Double.parseDouble(KRW_3); //KRW3
            Object GetJPY3 = tt3.get("JPY");
            String JPY_3 = GetJPY3.toString();
            Double JPY3 = Double.parseDouble(JPY_3); //JPY3
            Object GetEUR3 = tt3.get("EUR");
            String EUR_3 = GetEUR3.toString();
            Double EUR3 = Double.parseDouble(EUR_3); //EUR3
            Object GetGBP3 = tt3.get("GBP");
            String GBP_3 = GetGBP3.toString();
            Double GBP3 = Double.parseDouble(GBP_3); //GBP3
            Object GetUSD3 = tt3.get("USD");
            String USD_3 = GetUSD2.toString();
            Double USD3 = Double.parseDouble(USD_3); //USD3
            Object GetRUB3 = tt3.get("RUB");
            String RUB_3 = GetRUB3.toString();
            Double RUB3 = Double.parseDouble(RUB_3); //RUB3
            Object GetCNY3 = tt3.get("CNY");
            String CNY_3 = GetCNY3.toString();
            Double CNY3 = Double.parseDouble(CNY_3); //CNY3
            /*
            System.out.println(THB3);
            System.out.println(CHF3);
            System.out.println(AUD3);
            System.out.println(HKD3);
            System.out.println(KRW3);
            System.out.println(JPY3);
            System.out.println(EUR3);
            System.out.println(GBP3);
            System.out.println(USD3);
            System.out.println(RUB3);
            System.out.println(CNY3);
            */
            //----------end_dataset_date3----------
            
            //---------start_dataset_date4---------
            
            String url_4 = "http://data.fixer.io/api/"+date_4+"?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB";
            URL url_04 = new URL(url_4);
            //System.out.println(url_04);
            URLConnection urlConnection4 = url_04.openConnection();
            urlConnection4.setDoOutput(true);
            urlConnection4.connect();
            BufferedReader inputStream4 = new BufferedReader(new InputStreamReader(
                    urlConnection4.getInputStream()));
            String line4 = inputStream4.readLine();
            //System.out.println(line4); 
            String json4 = line4;
            //*********START*********
            JSONObject c4 = new JSONObject(json4);
            //System.out.println(c4);
            Boolean booleanResultSuccess4 = c4.getBoolean("success");
            Integer intResultTimestamp4 = c4.getInt("timestamp");
            Boolean booleanResultHistoricl4 = c4.getBoolean("historical");
            String strResultBase4 = c4.getString("base");
            String strResultDate4 = c4.getString("date");
            /*
            System.out.println(booleanResultSuccess4);
            System.out.println(intResultTimestamp4);
            System.out.println(booleanResultHistoricl4);
            System.out.println(strResultBase4);
            System.out.println(strResultDate4);
            */
            Object objectResultRates4 = c4.get("rates");
            //System.out.println(objectResultRates4);
            String s4 = objectResultRates4.toString();
            //System.out.println(s4);
            JSONObject tt4 = new JSONObject(s4);
            //System.out.println(tt4);
            Object GetTHB4 = tt4.get("THB");   
            String THB_4 = GetTHB4.toString();
            Double THB4 = Double.parseDouble(THB_4); //THB4
            Object GetCHF4 = tt4.get("CHF");
            String CHF_4 = GetCHF4.toString();
            Double CHF4 = Double.parseDouble(CHF_4); //CHF4
            Object GetAUD4 = tt4.get("AUD");
            String AUD_4 = GetAUD4.toString();
            Double AUD4 = Double.parseDouble(AUD_4); //AUD4
            Object GetHKD4 = tt4.get("HKD");
            String HKD_4 = GetHKD4.toString();
            Double HKD4 = Double.parseDouble(HKD_4); //HKD4
            Object GetKRW4 = tt4.get("KRW");
            String KRW_4 = GetKRW4.toString();
            Double KRW4 = Double.parseDouble(KRW_4); //KRW4
            Object GetJPY4 = tt4.get("JPY");
            String JPY_4 = GetJPY4.toString();
            Double JPY4 = Double.parseDouble(JPY_4); //JPY4
            Object GetEUR4 = tt4.get("EUR");
            String EUR_4 = GetEUR4.toString();
            Double EUR4 = Double.parseDouble(EUR_4); //EUR4
            Object GetGBP4 = tt4.get("GBP");
            String GBP_4 = GetGBP4.toString();
            Double GBP4 = Double.parseDouble(GBP_4); //GBP4
            Object GetUSD4 = tt4.get("USD");
            String USD_4 = GetUSD4.toString();
            Double USD4 = Double.parseDouble(USD_4); //USD4
            Object GetRUB4 = tt4.get("RUB");
            String RUB_4 = GetRUB4.toString();
            Double RUB4 = Double.parseDouble(RUB_4); //RUB4
            Object GetCNY4 = tt4.get("CNY");
            String CNY_4 = GetCNY4.toString();
            Double CNY4 = Double.parseDouble(CNY_4); //CNY4
            /*
            System.out.println(THB4);
            System.out.println(CHF4);
            System.out.println(AUD4);
            System.out.println(HKD4);
            System.out.println(KRW4);
            System.out.println(JPY4);
            System.out.println(EUR4);
            System.out.println(GBP4);
            System.out.println(USD4);
            System.out.println(RUB4);
            System.out.println(CNY4);
            */
            //----------end_dataset_date4----------
            
            //---------start_dataset_date5---------
            
            String url_5 = "http://data.fixer.io/api/"+date_5+"?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB";
            URL url_05 = new URL(url_5);
            //System.out.println(url_05);
            URLConnection urlConnection5 = url_05.openConnection();
            urlConnection5.setDoOutput(true);
            urlConnection5.connect();
            BufferedReader inputStream5 = new BufferedReader(new InputStreamReader(
                    urlConnection5.getInputStream()));
            String line5 = inputStream5.readLine();
            //System.out.println(line5); 
            String json5 = line5;
            //*********START*********
            JSONObject c5 = new JSONObject(json5);
            //System.out.println(c4);
            Boolean booleanResultSuccess5 = c5.getBoolean("success");
            Integer intResultTimestamp5 = c5.getInt("timestamp");
            Boolean booleanResultHistoricl5 = c5.getBoolean("historical");
            String strResultBase5 = c5.getString("base");
            String strResultDate5 = c5.getString("date");
            /*
            System.out.println(booleanResultSuccess5);
            System.out.println(intResultTimestamp5);
            System.out.println(booleanResultHistoricl5);
            System.out.println(strResultBase5);
            System.out.println(strResultDate5);
            */
            Object objectResultRates5 = c5.get("rates");
            //System.out.println(objectResultRates5);
            String s5 = objectResultRates5.toString();
            //System.out.println(s5);
            JSONObject tt5 = new JSONObject(s5);
            //System.out.println(tt4);
            Object GetTHB5 = tt5.get("THB");   
            String THB_5 = GetTHB5.toString();
            Double THB5 = Double.parseDouble(THB_5); //THB5
            Object GetCHF5 = tt5.get("CHF");
            String CHF_5 = GetCHF5.toString();
            Double CHF5 = Double.parseDouble(CHF_5); //CHF5
            Object GetAUD5 = tt5.get("AUD");
            String AUD_5 = GetAUD5.toString();
            Double AUD5 = Double.parseDouble(AUD_5); //AUD5
            Object GetHKD5 = tt5.get("HKD");
            String HKD_5 = GetHKD5.toString();
            Double HKD5 = Double.parseDouble(HKD_5); //HKD5
            Object GetKRW5 = tt5.get("KRW");
            String KRW_5 = GetKRW5.toString();
            Double KRW5 = Double.parseDouble(KRW_5); //KRW5
            Object GetJPY5 = tt5.get("JPY");
            String JPY_5 = GetJPY5.toString();
            Double JPY5 = Double.parseDouble(JPY_5); //JPY5
            Object GetEUR5 = tt5.get("EUR");
            String EUR_5 = GetEUR5.toString();
            Double EUR5 = Double.parseDouble(EUR_5); //EUR5
            Object GetGBP5 = tt5.get("GBP");
            String GBP_5 = GetGBP5.toString();
            Double GBP5 = Double.parseDouble(GBP_5); //GBP5
            Object GetUSD5 = tt5.get("USD");
            String USD_5 = GetUSD5.toString();
            Double USD5 = Double.parseDouble(USD_5); //USD5
            Object GetRUB5 = tt5.get("RUB");
            String RUB_5 = GetRUB5.toString();
            Double RUB5 = Double.parseDouble(RUB_5); //RUB5
            Object GetCNY5 = tt5.get("CNY");
            String CNY_5 = GetCNY5.toString();
            Double CNY5 = Double.parseDouble(CNY_5); //CNY5
            /*
            System.out.println(THB5);
            System.out.println(CHF5);
            System.out.println(AUD5);
            System.out.println(HKD5);
            System.out.println(KRW5);
            System.out.println(JPY5);
            System.out.println(EUR5);
            System.out.println(GBP5);
            System.out.println(USD5);
            System.out.println(RUB5);
            System.out.println(CNY5);
            */
            //----------end_dataset_date5----------
            
            //---------start_dataset_date6---------
            
            String url_6 = "http://data.fixer.io/api/"+date_6+"?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB";
            URL url_06 = new URL(url_6);
            //System.out.println(url_06);
            URLConnection urlConnection6 = url_06.openConnection();
            urlConnection6.setDoOutput(true);
            urlConnection6.connect();
            BufferedReader inputStream6 = new BufferedReader(new InputStreamReader(
                    urlConnection6.getInputStream()));
            String line6 = inputStream6.readLine();
            //System.out.println(line6); 
            String json6 = line6;
            //*********START*********
            JSONObject c6 = new JSONObject(json6);
            //System.out.println(c6);
            Boolean booleanResultSuccess6 = c6.getBoolean("success");
            Integer intResultTimestamp6 = c6.getInt("timestamp");
            Boolean booleanResultHistoricl6 = c6.getBoolean("historical");
            String strResultBase6 = c6.getString("base");
            String strResultDate6 = c6.getString("date");
            /*
            System.out.println(booleanResultSuccess6);
            System.out.println(intResultTimestamp6);
            System.out.println(booleanResultHistoricl6);
            System.out.println(strResultBase6);
            System.out.println(strResultDate6);
            */
            Object objectResultRates6 = c6.get("rates");
            //System.out.println(objectResultRates6);
            String s6 = objectResultRates6.toString();
            //System.out.println(s6);
            JSONObject tt6 = new JSONObject(s6);
            //System.out.println(tt6);
            Object GetTHB6 = tt6.get("THB");   
            String THB_6 = GetTHB6.toString();
            Double THB6 = Double.parseDouble(THB_6); //THB6
            Object GetCHF6 = tt6.get("CHF");
            String CHF_6 = GetCHF6.toString();
            Double CHF6 = Double.parseDouble(CHF_6); //CHF6
            Object GetAUD6 = tt6.get("AUD");
            String AUD_6 = GetAUD6.toString();
            Double AUD6 = Double.parseDouble(AUD_6); //AUD6
            Object GetHKD6 = tt6.get("HKD");
            String HKD_6 = GetHKD6.toString();
            Double HKD6 = Double.parseDouble(HKD_6); //HKD6
            Object GetKRW6 = tt6.get("KRW");
            String KRW_6 = GetKRW6.toString();
            Double KRW6 = Double.parseDouble(KRW_6); //KRW6
            Object GetJPY6 = tt6.get("JPY");
            String JPY_6 = GetJPY6.toString();
            Double JPY6 = Double.parseDouble(JPY_6); //JPY6
            Object GetEUR6 = tt6.get("EUR");
            String EUR_6 = GetEUR6.toString();
            Double EUR6 = Double.parseDouble(EUR_6); //EUR6
            Object GetGBP6 = tt6.get("GBP");
            String GBP_6 = GetGBP6.toString();
            Double GBP6 = Double.parseDouble(GBP_6); //GBP6
            Object GetUSD6 = tt6.get("USD");
            String USD_6 = GetUSD6.toString();
            Double USD6 = Double.parseDouble(USD_6); //USD6
            Object GetRUB6 = tt6.get("RUB");
            String RUB_6 = GetRUB6.toString();
            Double RUB6 = Double.parseDouble(RUB_6); //RUB6
            Object GetCNY6 = tt6.get("CNY");
            String CNY_6 = GetCNY6.toString();
            Double CNY6 = Double.parseDouble(CNY_6); //CNY6
            /*
            System.out.println(THB6);
            System.out.println(CHF6);
            System.out.println(AUD6);
            System.out.println(HKD6);
            System.out.println(KRW6);
            System.out.println(JPY6);
            System.out.println(EUR6);
            System.out.println(GBP6);
            System.out.println(USD6);
            System.out.println(RUB6);
            System.out.println(CNY6);
            */
            //----------end_dataset_date6----------

            //---------start_dataset_date7---------
            
            String url_7 = "http://data.fixer.io/api/"+date_7+"?access_key=6b78ccfb10f005191a0d2b2dd2ae06bc&symbols=THB,USD,GBP,EUR,CHF,AUD,JPY,KRW,CNY,HKD,RUB";
            URL url_07 = new URL(url_7);
            //System.out.println(url_07);
            URLConnection urlConnection7 = url_07.openConnection();
            urlConnection7.setDoOutput(true);
            urlConnection7.connect();
            BufferedReader inputStream7 = new BufferedReader(new InputStreamReader(
                    urlConnection7.getInputStream()));
            String line7 = inputStream7.readLine();
            //System.out.println(line7); 
            String json7 = line7;
            //*********START*********
            JSONObject c7 = new JSONObject(json7);
            //System.out.println(c7);
            Boolean booleanResultSuccess7 = c7.getBoolean("success");
            Integer intResultTimestamp7 = c7.getInt("timestamp");
            Boolean booleanResultHistoricl7 = c7.getBoolean("historical");
            String strResultBase7 = c7.getString("base");
            String strResultDate7 = c7.getString("date");
            /*
            System.out.println(booleanResultSuccess7);
            System.out.println(intResultTimestamp7);
            System.out.println(booleanResultHistoricl7);
            System.out.println(strResultBase7);
            System.out.println(strResultDate7);
            */
            Object objectResultRates7 = c7.get("rates");
            //System.out.println(objectResultRates7);
            String s7 = objectResultRates7.toString();
            //System.out.println(s7);
            JSONObject tt7 = new JSONObject(s7);
            //System.out.println(tt7);
            Object GetTHB7 = tt7.get("THB");   
            String THB_7 = GetTHB7.toString();
            Double THB7 = Double.parseDouble(THB_7); //THB7
            Object GetCHF7 = tt7.get("CHF");
            String CHF_7 = GetCHF7.toString();
            Double CHF7 = Double.parseDouble(CHF_7); //CHF7
            Object GetAUD7 = tt7.get("AUD");
            String AUD_7 = GetAUD7.toString();
            Double AUD7 = Double.parseDouble(AUD_7); //AUD7
            Object GetHKD7 = tt7.get("HKD");
            String HKD_7 = GetHKD7.toString();
            Double HKD7 = Double.parseDouble(HKD_7); //HKD7
            Object GetKRW7 = tt7.get("KRW");
            String KRW_7 = GetKRW7.toString();
            Double KRW7 = Double.parseDouble(KRW_7); //KRW7
            Object GetJPY7 = tt7.get("JPY");
            String JPY_7 = GetJPY7.toString();
            Double JPY7 = Double.parseDouble(JPY_7); //JPY7
            Object GetEUR7 = tt7.get("EUR");
            String EUR_7 = GetEUR7.toString();
            Double EUR7 = Double.parseDouble(EUR_7); //EUR7
            Object GetGBP7 = tt7.get("GBP");
            String GBP_7 = GetGBP7.toString();
            Double GBP7 = Double.parseDouble(GBP_7); //GBP7
            Object GetUSD7 = tt7.get("USD");
            String USD_7 = GetUSD7.toString();
            Double USD7 = Double.parseDouble(USD_7); //USD7
            Object GetRUB7 = tt7.get("RUB");
            String RUB_7 = GetRUB7.toString();
            Double RUB7 = Double.parseDouble(RUB_7); //RUB7
            Object GetCNY7 = tt7.get("CNY");
            String CNY_7 = GetCNY7.toString();
            Double CNY7 = Double.parseDouble(CNY_7); //CNY7
            /*
            System.out.println(THB7);
            System.out.println(CHF7);
            System.out.println(AUD7);
            System.out.println(HKD7);
            System.out.println(KRW7);
            System.out.println(JPY7);
            System.out.println(EUR7);
            System.out.println(GBP7);
            System.out.println(USD7);
            System.out.println(RUB7);
            System.out.println(CNY7);
            */
            //----------end_dataset_date7----------
            
            //----------start_data_chart-----------
            
            Object object_chart_currency = jComboBox1.getSelectedItem();
            String base_chart_currency = object_chart_currency.toString();
            
            Object object_chart_to_currency = jComboBox2.getSelectedItem();
            String to_chart_currency = object_chart_to_currency.toString();
            
            String Final_Base;
            Double Base1=1.0,Base2=1.0,Base3=1.0,Base4=1.0,Base5=1.0,Base6=1.0,Base7=1.0;
            
            if (base_chart_currency.equals("THB")){
                Final_Base = "THB";
                Base1 = THB1;
                Base2 = THB2;
                Base3 = THB3;
                Base4 = THB4;
                Base5 = THB5;
                Base6 = THB6;
                Base7 = THB7;
            } else if (base_chart_currency.equals("CHF")){
                Final_Base = "CHF";
                Base1 = CHF1;
                Base2 = CHF2;
                Base3 = CHF3;
                Base4 = CHF4;
                Base5 = CHF5;
                Base6 = CHF6;
                Base7 = CHF7;
            } else if (base_chart_currency.equals("AUD")){
                Final_Base = "AUD";
                Base1 = AUD1;
                Base2 = AUD2;
                Base3 = AUD3;
                Base4 = AUD4;
                Base5 = AUD5;
                Base6 = AUD6;
                Base7 = AUD7;
            } else if (base_chart_currency.equals("HKD")){
                Final_Base = "HKD";
                Base1 = HKD1;
                Base2 = HKD2;
                Base3 = HKD3;
                Base4 = HKD4;
                Base5 = HKD5;
                Base6 = HKD6;
                Base7 = HKD7;
            } else if (base_chart_currency.equals("KRW")){
                Final_Base = "KRW";
                Base1 = KRW1;
                Base2 = KRW2;
                Base3 = KRW3;
                Base4 = KRW4;
                Base5 = KRW5;
                Base6 = KRW6;
                Base7 = KRW7;
            } else if (base_chart_currency.equals("JPY")){
                Final_Base = "JPY";
                Base1 = JPY1;
                Base2 = JPY2;
                Base3 = JPY3;
                Base4 = JPY4;
                Base5 = JPY5;
                Base6 = JPY6;
                Base7 = JPY7;
            } else if (base_chart_currency.equals("EUR")){
                Final_Base = "EUR";
                Base1 = EUR1;
                Base2 = EUR2;
                Base3 = EUR3;
                Base4 = EUR4;
                Base5 = EUR5;
                Base6 = EUR6;
                Base7 = EUR7;
            } else if (base_chart_currency.equals("GBP")){
                Final_Base = "GBP";
                Base1 = GBP1;
                Base2 = GBP2;
                Base3 = GBP3;
                Base4 = GBP4;
                Base5 = GBP5;
                Base6 = GBP6;
                Base7 = GBP7;
            } else if (base_chart_currency.equals("USD")){
                Final_Base = "USD";
                Base1 = USD1;
                Base2 = USD2;
                Base3 = USD3;
                Base4 = USD4;
                Base5 = USD5;
                Base6 = USD6;
                Base7 = USD7;
            } else if (base_chart_currency.equals("RUB")){
                Final_Base = "RUB";
                Base1 = RUB1;
                Base2 = RUB2;
                Base3 = RUB3;
                Base4 = RUB4;
                Base5 = RUB5;
                Base6 = RUB6;
                Base7 = RUB7;
            } else if (base_chart_currency.equals("CNY")){
                Final_Base = "CNY";
                Base1 = CNY1;
                Base2 = CNY2;
                Base3 = CNY3;
                Base4 = CNY4;
                Base5 = CNY5;
                Base6 = CNY6;
                Base7 = CNY7;
            }
            
            String Final_To;
            Double To1=1.0,To2=1.0,To3=1.0,To4=1.0,To5=1.0,To6=1.0,To7=1.0;
            if (to_chart_currency.equals("THB")){
                Final_To = "THB";
                To1 = THB1;
                To2 = THB2;
                To3 = THB3;
                To4 = THB4;
                To5 = THB5;
                To6 = THB6;
                To7 = THB7;
            } else if (to_chart_currency.equals("CHF")){
                Final_To = "CHF";
                To1 = CHF1;
                To2 = CHF2;
                To3 = CHF3;
                To4 = CHF4;
                To5 = CHF5;
                To6 = CHF6;
                To7 = CHF7;
            } else if (to_chart_currency.equals("AUD")){
                Final_To = "AUD";
                To1 = AUD1;
                To2 = AUD2;
                To3 = AUD3;
                To4 = AUD4;
                To5 = AUD5;
                To6 = AUD6;
                To7 = AUD7;
            } else if (to_chart_currency.equals("HKD")){
                Final_To = "HKD";
                To1 = HKD1;
                To2 = HKD2;
                To3 = HKD3;
                To4 = HKD4;
                To5 = HKD5;
                To6 = HKD6;
                To7 = HKD7;
            } else if (to_chart_currency.equals("KRW")){
                Final_To = "KRW";
                To1 = KRW1;
                To2 = KRW2;
                To3 = KRW3;
                To4 = KRW4;
                To5 = KRW5;
                To6 = KRW6;
                To7 = KRW7;
            } else if (to_chart_currency.equals("JPY")){
                Final_To = "JPY";
                To1 = JPY1;
                To2 = JPY2;
                To3 = JPY3;
                To4 = JPY4;
                To5 = JPY5;
                To6 = JPY6;
                To7 = JPY7;
            } else if (to_chart_currency.equals("EUR")){
                Final_To = "EUR";
                To1 = EUR1;
                To2 = EUR2;
                To3 = EUR3;
                To4 = EUR4;
                To5 = EUR5;
                To6 = EUR6;
                To7 = EUR7;
            } else if (to_chart_currency.equals("GBP")){
                Final_To = "GBP";
                To1 = GBP1;
                To2 = GBP2;
                To3 = GBP3;
                To4 = GBP4;
                To5 = GBP5;
                To6 = GBP6;
                To7 = GBP7;
            } else if (to_chart_currency.equals("USD")){
                Final_To = "USD";
                To1 = USD1;
                To2 = USD2;
                To3 = USD3;
                To4 = USD4;
                To5 = USD5;
                To6 = USD6;
                To7 = USD7;
            } else if (to_chart_currency.equals("RUB")){
                Final_To = "RUB";
                To1 = RUB1;
                To2 = RUB2;
                To3 = RUB3;
                To4 = RUB4;
                To5 = RUB5;
                To6 = RUB6;
                To7 = RUB7;
            } else if (to_chart_currency.equals("CNY")){
                Final_To = "CNY";
                To1 = CNY1;
                To2 = CNY2;
                To3 = CNY3;
                To4 = CNY4;
                To5 = CNY5;
                To6 = CNY6;
                To7 = CNY7;
            } 
            
            Double Mid1 = 1/Base1*To1;
            Double Mid2 = 1/Base2*To2;
            Double Mid3 = 1/Base3*To3;
            Double Mid4 = 1/Base4*To4;
            Double Mid5 = 1/Base5*To5;
            Double Mid6 = 1/Base6*To6;
            Double Mid7 = 1/Base7*To7;
            
            Double[] List1 = {Mid1,Mid2,Mid3,Mid4,Mid5,Mid6,Mid7};
            //System.out.println(Arrays.asList(List1));
            
            Double MIN = (double) Collections.min(Arrays.asList(List1));
            Double MAX = (double) Collections.max(Arrays.asList(List1));
            //System.out.println(MIN);
            //System.out.println(MAX);
            
            Double TickLength = (MAX-MIN)/4;
            //Double MinLength = MIN*0.99;
            //Double MaxLength = MAX*1.01;
            Double MinLength = MIN-(TickLength*0.2);
            Double MaxLength = MAX+(TickLength*0.2);
            /*
            System.out.println(MAX);
            System.out.println(MIN);
            System.out.println(MaxLength);
            System.out.println(MinLength);
            System.out.println(TickLength);
            */
            //-----------end_data_chart------------
            
            //-------------start_chart-------------
            
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            
            dataset.setValue(Mid7, "Rate", date_7_2);
            dataset.setValue(Mid6, "Rate", date_6_2);
            dataset.setValue(Mid5, "Rate", date_5_2);
            dataset.setValue(Mid4, "Rate", date_4_2);
            dataset.setValue(Mid3, "Rate", date_3_2);
            dataset.setValue(Mid2, "Rate", date_2_2);
            dataset.setValue(Mid1, "Rate", date_1_2);
            
            JFreeChart chart = ChartFactory.createLineChart("Exchange Rates in 7 Days", "Date", "Rate", dataset, PlotOrientation.VERTICAL, false, true, false);
            chart.setBackgroundPaint(Color.white);
            CategoryPlot plot = chart.getCategoryPlot();

            NumberAxis axis = (NumberAxis) plot.getRangeAxis();
            axis.setAutoRangeIncludesZero(false);
            axis.setRange(MinLength,MaxLength);
            axis.setTickUnit(new NumberTickUnit(TickLength));
            ChartFrame frame = new ChartFrame("Exchange", chart);
            frame.setSize(700,400);
            frame.setVisible(true);
            
            //--------------end_chart--------------
            
        } catch (MalformedURLException e) {
            System.out.println("Malformed URL: " + e.getMessage());
        } catch (IOException e){
            System.out.println("IOException: " + e.getMessage());
        } catch (JSONException e){
            System.out.println("JSONException: " + e.getMessage());
        } catch (ParseException e){
            System.out.println("JSONException: " + e.getMessage());
        } 
        
    }//GEN-LAST:event_graphActionPerformed
               
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //--------------call form url(apigwl.bot)--------------
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIForm().setVisible(true);
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton graph;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}